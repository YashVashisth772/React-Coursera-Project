[{"C:\\React 2021\\Coursera\\coursera-proj\\src\\index.js":"1","C:\\React 2021\\Coursera\\coursera-proj\\src\\reportWebVitals.js":"2","C:\\React 2021\\Coursera\\coursera-proj\\src\\App.js":"3","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\MenuComponent.js":"4","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\dishes.js":"5","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\DishdetailComponent .js":"6","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\MainComponent.js":"7","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\FooterComponent.js":"8","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\HeaderComponent.js":"9","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\HomeComponent.js":"10","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\ContactComponent.js":"11","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\comments.js":"12","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\leaders.js":"13","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\promotions.js":"14","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\AboutComponent.js":"15","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\configureStore.js":"16","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\reducer.js":"17","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\CommentFormComponent.js":"18","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\leadersReducer.js":"19","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\ActionCreators.js":"20","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\commentsReducer.js":"21","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\dishesReducer.js":"22","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\promotionsReducer.js":"23","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\ActionTypes.js":"24","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\LoadingComponent.js":"25","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\forms.js":"26","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\baseUrl.js":"27","C:\\React 2021\\Coursera\\coursera-proj\\src\\serviceWorker.js":"28"},{"size":716,"mtime":1623758324503,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1612015347831,"results":"31","hashOfConfig":"30"},{"size":546,"mtime":1612961231644,"results":"32","hashOfConfig":"30"},{"size":2315,"mtime":1613833862242,"results":"33","hashOfConfig":"30"},{"size":1490,"mtime":1612718016805,"results":"34","hashOfConfig":"30"},{"size":11105,"mtime":1613833961348,"results":"35","hashOfConfig":"30"},{"size":3698,"mtime":1613833833918,"results":"36","hashOfConfig":"30"},{"size":2637,"mtime":1612707489630,"results":"37","hashOfConfig":"30"},{"size":5081,"mtime":1613015564052,"results":"38","hashOfConfig":"30"},{"size":1565,"mtime":1613833922357,"results":"39","hashOfConfig":"30"},{"size":23468,"mtime":1613815676078,"results":"40","hashOfConfig":"30"},{"size":4279,"mtime":1612718051887,"results":"41","hashOfConfig":"30"},{"size":2373,"mtime":1613492859262,"results":"42","hashOfConfig":"30"},{"size":445,"mtime":1612718060692,"results":"43","hashOfConfig":"30"},{"size":4324,"mtime":1612768766932,"results":"44","hashOfConfig":"30"},{"size":1077,"mtime":1613815029815,"results":"45","hashOfConfig":"30"},{"size":407,"mtime":1612961261227,"results":"46","hashOfConfig":"30"},{"size":4611,"mtime":1613448325031,"results":"47","hashOfConfig":"30"},{"size":185,"mtime":1613445338708,"results":"48","hashOfConfig":"30"},{"size":1939,"mtime":1613833672949,"results":"49","hashOfConfig":"30"},{"size":682,"mtime":1613833710855,"results":"50","hashOfConfig":"30"},{"size":648,"mtime":1613810716877,"results":"51","hashOfConfig":"30"},{"size":737,"mtime":1613833730474,"results":"52","hashOfConfig":"30"},{"size":411,"mtime":1613833611182,"results":"53","hashOfConfig":"30"},{"size":256,"mtime":1613810697382,"results":"54","hashOfConfig":"30"},{"size":170,"mtime":1613814982493,"results":"55","hashOfConfig":"30"},{"size":48,"mtime":1613830547999,"results":"56","hashOfConfig":"30"},{"size":5485,"mtime":1623757158533,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"275rk8",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React 2021\\Coursera\\coursera-proj\\src\\index.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\reportWebVitals.js",[],["122","123"],"C:\\React 2021\\Coursera\\coursera-proj\\src\\App.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\MenuComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\dishes.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\DishdetailComponent .js",["124","125","126","127","128","129","130","131"],"import React ,{Component, useState} from 'react';\r\n// import { Card, CardImg, CardText, CardBody, CardTitle } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n// import CommentForm22 from './CommentFormComponent';\r\nimport { Button ,Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label , Row, Col} from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nexport class CommentForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            isCommentModal : false\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isCommentModal: !this.state.isCommentModal\r\n        })\r\n    }\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n        console.log( 'this.props.dishId, values.rating, values.author, values.comment',this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n    \r\n\r\n    render(){\r\n    return(\r\n        \r\n        <React.Fragment>\r\n           <Button color=\"secondary\" outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\">Submit Comment</span>\r\n                </Button>\r\n            <Modal isOpen={this.state.isCommentModal} toggle={this.toggleModal}>\r\n                <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label md={12} htmlFor=\"rating\">Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"author\" md={12}>Your Name</Label>\r\n                            <Col md={12}>\r\n                                <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                    placeholder=\"Your Name\"\r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                    }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".author\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 3 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                            <Col>\r\n                                <Control.textarea model=\".comment\" md={10} id=\"comment\" name=\"comment\"\r\n                                    rows=\"6\"\r\n                                    className=\"form-control\" />\r\n                            </Col>\r\n                        </Row>\r\n                        <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction RenderDish({dish}){\r\n    if(dish){\r\n        return(\r\n            <div>\r\n                <Card>\r\n                    <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nfunction RenderComments({comments, addComment , dishId}){\r\n        if(comments){\r\n            let commentListItems = comments.map((comment) => {\r\n                return(\r\n                    <li key={comment.id}>\r\n                        <div>\r\n                            {console.log('yash ',{dishId})}\r\n                            {console.log('yash comment',{comment})}\r\n\r\n                            <p>{comment.comment}</p>\r\n                            <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                        </div>\r\n                    </li>\r\n                );\r\n            });\r\n            return(\r\n                <div >\r\n                    <h4>Comments</h4>\r\n                    <ul className=\"list-unstyled\">\r\n                        {commentListItems}\r\n                    </ul>\r\n                    <CommentForm dishId={dishId} addComment={addComment} />\r\n                </div>\r\n            )\r\n        }else{\r\n            return <div></div>\r\n        }\r\n\r\n}\r\nfunction Counter(){\r\n    const [count , setCount] = useState(0)\r\n\r\n    // const increment=() => {\r\n    //     setCount = prevCount +1;\r\n    // }\r\n    return(\r\n        <div className=\"container\">\r\n        <div className=\"col-12 md-12\">\r\n             <Button color=\"secondary\" size=\"lg\" outline onClick={()=> setCount(count+1)}>\r\n             <span className=\"fa fa-paper-plane \">+</span>\r\n             </Button>\r\n            {/* <button onClick={()=> setCount(count+1)}>+</button> */}\r\n            <h3 style={{color:'green'}}>Count is: &nbsp;&nbsp;&nbsp;{count}</h3>\r\n        </div></div>\r\n    )\r\n}\r\n\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    else if(props.dish){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderDish dish={props.dish} />\r\n                    </div>\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderComments comments={props.comments} \r\n                        addComment= {props.addComment}\r\n                        dishId={props.dish.id} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <Counter />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                \r\n        )\r\n    }else{ \r\n        return <div></div>\r\n    }\r\n}\r\n\r\n\r\nexport default DishDetail;\r\n\r\n\r\n\r\n\r\n\r\n//Class based component form\r\n// class DishDetail extends Component {\r\n    \r\n//     renderDish(dish) {\r\n//         // const dish = this.props.choosenDish; \r\n//         if(dish){\r\n//             return(\r\n//                 <div className=\"col-12 col-md-5 m-1\">\r\n//                     <Card>\r\n//                         <CardImg top src={dish.image} alt={dish.name} />\r\n//                         <CardBody>\r\n//                         <CardTitle>{dish.name}</CardTitle>\r\n//                             <CardText>{dish.description}</CardText>\r\n//                         </CardBody>\r\n//                     </Card>\r\n//                 </div>\r\n//             )\r\n//         }\r\n//         else{\r\n//             return <div></div>\r\n//         }\r\n//     }\r\n//     renderComments(dish){\r\n//         const comments = dish;\r\n//         if(comments){\r\n//             const commentListItems = comments.map((comment) => {\r\n//                 return(\r\n//                     <li key={comment.id}>\r\n//                         <div>\r\n//                             <p>{comment.comment}</p>\r\n//                             <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n//                         </div>\r\n//                     </li>\r\n//                 );\r\n//             });\r\n//             return(\r\n//                 <div className=\"col-12 col-md-5 m-1\">\r\n//                     <h4>Comments</h4>\r\n//                     <ul className=\"list-unstyled\">\r\n//                         {commentListItems}\r\n//                     </ul>\r\n//                 </div>\r\n//             )\r\n//         }else{\r\n//             return <div></div>\r\n//         }\r\n           \r\n//     }\r\n\r\n//     render() {      \r\n       \r\n//             return (\r\n//                 this.props.dish &&\r\n//                 <div className=\"conainer\">\r\n//                     <div className=\"row\">\r\n//                         {this.renderDish(this.props.dish)}\r\n//                         {this.renderComments(this.props.dish.comments)}\r\n//                     </div>\r\n//                 </div>\r\n              \r\n//             )\r\n\r\n//     }\r\n// }\r\n\r\n","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\MainComponent.js",["132","133"],"import React, { Component } from 'react';\r\nimport Menu from './MenuComponent';\r\nimport DishDetail from './DishdetailComponent ';\r\nimport { DISHES } from '../shared/dishes';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect ,withRouter } from 'react-router-dom';\r\nimport Home from './HomeComponent';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\n// import { COMMENTS } from '../shared/comments';\r\n// import { PROMOTIONS } from '../shared/promotions';\r\n// import { LEADERS } from '../shared/leaders';\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchDishes2();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n  }\r\n\r\n//   onDishSelect(dishId) {\r\n//     this.setState({ selectedDish: dishId});\r\n//   }\r\n\r\n  render() {\r\n    const HomePage = () => {\r\n      return(\r\n        <Home\r\n          dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n          dishesLoading={this.props.dishes.isLoading}\r\n          dishErrMess={this.props.dishes.errMess}\r\n          promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n          promoLoading={this.props.promotions.isLoading}\r\n          promoErrMess={this.props.promotions.errMess}\r\n          leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n        />\r\n      );\r\n    }\r\n\r\n    const DishWithId = ({match}) => {\r\n      return(\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n            isLoading={this.props.dishes.isLoading}\r\n            errMess={this.props.dishes.errMess}\r\n            comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n            commentsErrMess={this.props.comments.errMess}\r\n            addComment={this.props.addComment}\r\n          />\r\n      );\r\n    };\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n              <Route path='/home' component={HomePage} />\r\n\r\n              <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n\r\n              <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm2} />} />\r\n\r\n              <Route path='/aboutus' component={() => <About leaders={this.props.leaders} /> }/>\r\n\r\n              <Route path='/menu/:dishId' component={DishWithId} />\r\n\r\n              <Redirect to=\"/home\" />\r\n          </Switch>\r\n        {/* <Menu dishes={this.state.dishes} onClick={(dishId) => this.onDishSelect(dishId)} /> */}\r\n        {/* <DishDetail dish={this.state.dishes.filter((dish) => dish.id === this.state.selectedDish)[0]} /> */}\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  \r\n  addComment2: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n\r\n  fetchDishes2: () => { dispatch(fetchDishes())},\r\n\r\n  resetFeedbackForm2: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => dispatch(fetchComments()),\r\n  fetchPromos: () => dispatch(fetchPromos())\r\n\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\FooterComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\HeaderComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\HomeComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\ContactComponent.js",["134","135","136","137","138","139","140","141","142"],"import React , {Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label } from 'reactstrap';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nclass Contact extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n        // event.preventDefault();\r\n    }\r\n    \r\n    \r\n    render(){\r\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"container\" >\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Contact Us</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row-content\">\r\n                        <div className=\"col-12\">\r\n                            <h3>Location Information</h3>\r\n                        </div>\r\n                        <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                                121, Clear Water Bay Road<br />\r\n                Clear Water Bay, Kowloon<br />\r\n                HONG KONG<br />\r\n                                <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                                <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                                <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                        </div>\r\n                        <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                            <h5>Map of our Location</h5>\r\n                        </div>\r\n                        <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                            <div className=\"btn-group\" role=\"group\">\r\n                                <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                                <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                                <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n               </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default Contact;\r\n\r\n\r\n\r\n\r\n// Without React-Redux-Form\r\n\r\n\r\n// import React , {Component } from 'react';\r\n// import { Breadcrumb, BreadcrumbItem ,Button, Form, FormGroup, Label, Input, Col ,Row, FormFeedback} from 'reactstrap';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// class Contact extends Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state={\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: '',\r\n//             agree: false,\r\n//             contactType: 'Tel.',\r\n//             message: '',\r\n//             touched: {\r\n//                 firstname: false,\r\n//                 lastname: false,\r\n//                 telnum: false,\r\n//                 email: false\r\n//             }\r\n            \r\n//         }\r\n//         this.handleSubmit = this.handleSubmit.bind(this);\r\n//         this.handleInputChange = this.handleInputChange.bind(this);\r\n//         this.handleBlur = this.handleBlur.bind(this);\r\n//         // this.validate = this.validate.bind(this);\r\n\r\n//     }\r\n\r\n//     handleInputChange(event) {\r\n//         const target = event.target;\r\n//         const value = target.type === 'checkbox' ? target.checked : target.value;\r\n//         const name = target.name;\r\n    \r\n//         this.setState({\r\n//           [name]: value\r\n//         });\r\n//     }\r\n\r\n//     handleSubmit(event) {\r\n//         console.log('Current State is: ' + JSON.stringify(this.state));\r\n//         //  alert('Current State is: ' + JSON.stringify(this.state));\r\n//         event.preventDefault();\r\n//     }\r\n\r\n//     handleBlur = (field) => (evt) => {\r\n//         this.setState({\r\n//             touched: { ...this.state.touched, [field]: true }\r\n//         });\r\n//     }\r\n\r\n//     validate(firstname, lastname, telnum, email) {\r\n//         const errors = {\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: ''\r\n//         };\r\n\r\n//         if (this.state.touched.firstname && firstname.length < 3)\r\n//             errors.firstname = 'First Name should be >= 3 characters';\r\n//         else if (this.state.touched.firstname && firstname.length > 10)\r\n//             errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n//         if (this.state.touched.lastname && lastname.length < 3)\r\n//             errors.lastname = 'Last Name should be >= 3 characters';\r\n//         else if (this.state.touched.lastname && lastname.length > 10)\r\n//             errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n//         const reg = /^\\d+$/;\r\n//         if (this.state.touched.telnum && !reg.test(telnum))\r\n//             errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n//         if(this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n//             errors.email = 'Email should contain a @';\r\n\r\n//         return errors;\r\n//     }\r\n    \r\n//     render(){\r\n//         const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n//         return(\r\n//             <React.Fragment>\r\n//                 <div className=\"container\" >\r\n//                     <div className=\"row\">\r\n//                         <Breadcrumb>\r\n//                             <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n//                             <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n//                         </Breadcrumb>\r\n//                         <div className=\"col-12\">\r\n//                             <h3>Contact Us</h3>\r\n//                             <hr />\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className=\"row row-content\">\r\n//                         <div className=\"col-12\">\r\n//                             <h3>Location Information</h3>\r\n//                         </div>\r\n//                         <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n//                             <h5>Our Address</h5>\r\n//                             <address>\r\n//                                 121, Clear Water Bay Road<br />\r\n//                 Clear Water Bay, Kowloon<br />\r\n//                 HONG KONG<br />\r\n//                                 <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n//                                 <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n//                                 <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n//                             </address>\r\n//                         </div>\r\n//                         <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n//                             <h5>Map of our Location</h5>\r\n//                         </div>\r\n//                         <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n//                             <div className=\"btn-group\" role=\"group\">\r\n//                                 <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n//                                 <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n//                                 <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                     <div className=\"row row-content\">\r\n//                    <div className=\"col-12\">\r\n//                       <h3>Send us your Feedback</h3>\r\n//                    </div>\r\n//                     <div className=\"col-12 col-md-9\">\r\n//                         <Form onSubmit={this.handleSubmit}>\r\n//                                 <FormGroup row>\r\n//                                     <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n//                                     <Col md={10}>\r\n//                                         <Input type=\"text\" id=\"firstname\" name=\"firstname\"\r\n//                                             placeholder=\"First Name\"\r\n//                                             value={this.state.firstname}\r\n//                                             valid={errors.firstname === ''}\r\n//                                             invalid={errors.firstname !== ''}\r\n//                                             onBlur={this.handleBlur('firstname')}\r\n//                                             onChange={this.handleInputChange} />\r\n//                                         <FormFeedback>{errors.firstname}</FormFeedback>\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                                 <FormGroup row>\r\n//                                     <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n//                                     <Col md={10}>\r\n//                                         <Input type=\"text\" id=\"lastname\" name=\"lastname\"\r\n//                                             placeholder=\"Last Name\"\r\n//                                             value={this.state.lastname}\r\n//                                             valid={errors.lastname === ''}\r\n//                                             invalid={errors.lastname !== ''}\r\n//                                             onBlur={this.handleBlur('lastname')}\r\n//                                             onChange={this.handleInputChange} />\r\n//                                         <FormFeedback>{errors.lastname}</FormFeedback>\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                                 <FormGroup row>\r\n//                                     <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n//                                     <Col md={10}>\r\n//                                         <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n//                                             placeholder=\"Tel. Number\"\r\n//                                             value={this.state.telnum}\r\n//                                             valid={errors.telnum === ''}\r\n//                                             invalid={errors.telnum !== ''}\r\n//                                             onBlur={this.handleBlur('telnum')}\r\n//                                             onChange={this.handleInputChange} />\r\n//                                         <FormFeedback>{errors.telnum}</FormFeedback>\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                                 <FormGroup row>\r\n//                                     <Label htmlFor=\"email\" md={2}>Email</Label>\r\n//                                     <Col md={10}>\r\n//                                         <Input type=\"email\" id=\"email\" name=\"email\"\r\n//                                             placeholder=\"Email\"\r\n//                                             value={this.state.email}\r\n//                                             valid={errors.email === ''}\r\n//                                             invalid={errors.email !== ''}\r\n//                                             onBlur={this.handleBlur('email')}\r\n//                                             onChange={this.handleInputChange} />\r\n//                                         <FormFeedback>{errors.email}</FormFeedback>\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                                 <FormGroup row>\r\n//                                     <Col md={{ size: 6, offset: 2 }}>\r\n//                                         <FormGroup check>\r\n//                                             <Label check>\r\n//                                                 <Input type=\"checkbox\"\r\n//                                                     name=\"agree\"\r\n//                                                     checked={this.state.agree}\r\n//                                                     onChange={this.handleInputChange} /> {' '}\r\n//                                                 <strong>May we contact you?</strong>\r\n//                                             </Label>\r\n//                                         </FormGroup>\r\n//                                     </Col>\r\n//                                     <Col md={{ size: 3, offset: 1 }}>\r\n//                                         <Input type=\"select\" name=\"contactType\"\r\n//                                             value={this.state.contactType}\r\n//                                             onChange={this.handleInputChange}>\r\n//                                             <option>Tel.</option>\r\n//                                             <option>Email</option>\r\n//                                         </Input>\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                                 <FormGroup row>\r\n//                                     <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n//                                     <Col md={10}>\r\n//                                         <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n//                                             rows=\"12\"\r\n//                                             value={this.state.message}\r\n//                                             onChange={this.handleInputChange}></Input>\r\n//                                     </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Col md={{size: 10, offset: 2}}>\r\n//                                     <Button type=\"submit\" color=\"primary\">\r\n//                                         Send Feedback\r\n//                                     </Button>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                         </Form>\r\n//                     </div>\r\n//                </div>\r\n//                 </div>\r\n//             </React.Fragment>\r\n//         )\r\n//     }    \r\n// }\r\n\r\n// export default Contact;","C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\comments.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\leaders.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\promotions.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\AboutComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\configureStore.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\reducer.js",[],["143","144"],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\CommentFormComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\leadersReducer.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\ActionCreators.js",["145"],"import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const addComment = (dishId, rating, author, comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n});\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)) );\r\n\r\n    // setTimeout(() => {\r\n    //     dispatch(addDishes(DISHES));\r\n    // }, 1500);\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\commentsReducer.js",["146"],"import { COMMENTS } from '../shared/comments';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = { errMess: null, comments:[]}, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_COMMENTS:\r\n      return {...state, errMess: null, comments: action.payload};\r\n\r\n    case ActionTypes.COMMENTS_FAILED:\r\n      return {...state, errMess: action.payload};\r\n\r\n    case ActionTypes.ADD_COMMENT:\r\n        var comment = action.payload;\r\n        comment.id = state.comments.length;\r\n        comment.date = new Date().toISOString();\r\n        return { ...state, comments: state.comments.concat(comment)};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\dishesReducer.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\promotionsReducer.js",["147"],"import { PROMOTIONS } from '../shared/promotions';\r\n\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Promotions = (state  = { isLoading: true,\r\n                                        errMess: null,\r\n                                        promotions:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_PROMOS:\r\n        return {...state, isLoading: false, errMess: null, promotions: action.payload};\r\n\r\n        case ActionTypes.PROMOS_LOADING:\r\n            return {...state, isLoading: true, errMess: null, promotions: []}\r\n\r\n        case ActionTypes.PROMOS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        default:\r\n          return state;\r\n      }\r\n};","C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\ActionTypes.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\components\\LoadingComponent.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\redux\\forms.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\shared\\baseUrl.js",[],"C:\\React 2021\\Coursera\\coursera-proj\\src\\serviceWorker.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":8,"column":5,"nodeType":"154","messageId":"155","endLine":8,"endColumn":9},{"ruleId":"152","severity":1,"message":"156","line":8,"column":11,"nodeType":"154","messageId":"155","endLine":8,"endColumn":20},{"ruleId":"152","severity":1,"message":"157","line":8,"column":22,"nodeType":"154","messageId":"155","endLine":8,"endColumn":27},{"ruleId":"152","severity":1,"message":"158","line":18,"column":7,"nodeType":"154","messageId":"155","endLine":18,"endColumn":15},{"ruleId":"152","severity":1,"message":"159","line":19,"column":7,"nodeType":"154","messageId":"155","endLine":19,"endColumn":17},{"ruleId":"160","severity":1,"message":"161","line":55,"column":37,"nodeType":"162","endLine":55,"endColumn":108},{"ruleId":"160","severity":1,"message":"163","line":67,"column":33,"nodeType":"162","endLine":73,"endColumn":35},{"ruleId":"160","severity":1,"message":"164","line":89,"column":33,"nodeType":"162","endLine":91,"endColumn":64},{"ruleId":"152","severity":1,"message":"165","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":16},{"ruleId":"166","severity":1,"message":"167","line":21,"column":3,"nodeType":"168","messageId":"169","endLine":23,"endColumn":4},{"ruleId":"152","severity":1,"message":"170","line":4,"column":33,"nodeType":"154","messageId":"155","endLine":4,"endColumn":40},{"ruleId":"171","severity":1,"message":"172","line":63,"column":33,"nodeType":"162","endLine":63,"endColumn":75},{"ruleId":"160","severity":1,"message":"163","line":77,"column":37,"nodeType":"162","endLine":83,"endColumn":44},{"ruleId":"160","severity":1,"message":"163","line":99,"column":37,"nodeType":"162","endLine":105,"endColumn":44},{"ruleId":"160","severity":1,"message":"163","line":121,"column":37,"nodeType":"162","endLine":127,"endColumn":44},{"ruleId":"160","severity":1,"message":"163","line":144,"column":37,"nodeType":"162","endLine":150,"endColumn":44},{"ruleId":"160","severity":1,"message":"173","line":166,"column":45,"nodeType":"162","endLine":168,"endColumn":52},{"ruleId":"160","severity":1,"message":"161","line":174,"column":37,"nodeType":"162","endLine":175,"endColumn":66},{"ruleId":"160","severity":1,"message":"164","line":184,"column":37,"nodeType":"162","endLine":186,"endColumn":68},{"ruleId":"148","replacedBy":"174"},{"ruleId":"150","replacedBy":"175"},{"ruleId":"152","severity":1,"message":"165","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"152","severity":1,"message":"176","line":1,"column":10,"nodeType":"154","messageId":"155","endLine":1,"endColumn":18},{"ruleId":"152","severity":1,"message":"177","line":1,"column":10,"nodeType":"154","messageId":"155","endLine":1,"endColumn":20},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","'Input' is defined but never used.","'isNumber' is assigned a value but never used.","'validEmail' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'DISHES' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["178"],["179"],"'COMMENTS' is defined but never used.","'PROMOTIONS' is defined but never used.","no-global-assign","no-unsafe-negation"]